/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EncounterConditionDetail,
  EncounterConditionValueDetail,
  EncounterMethodDetail,
  PaginatedEncounterConditionSummaryList,
  PaginatedEncounterConditionValueSummaryList,
  PaginatedEncounterMethodSummaryList,
  PokemonEncountersRetrieve200ResponseInner,
} from '../models/index';
import {
    EncounterConditionDetailFromJSON,
    EncounterConditionDetailToJSON,
    EncounterConditionValueDetailFromJSON,
    EncounterConditionValueDetailToJSON,
    EncounterMethodDetailFromJSON,
    EncounterMethodDetailToJSON,
    PaginatedEncounterConditionSummaryListFromJSON,
    PaginatedEncounterConditionSummaryListToJSON,
    PaginatedEncounterConditionValueSummaryListFromJSON,
    PaginatedEncounterConditionValueSummaryListToJSON,
    PaginatedEncounterMethodSummaryListFromJSON,
    PaginatedEncounterMethodSummaryListToJSON,
    PokemonEncountersRetrieve200ResponseInnerFromJSON,
    PokemonEncountersRetrieve200ResponseInnerToJSON,
} from '../models/index';

export interface EncounterConditionListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface EncounterConditionRetrieveRequest {
    id: string;
}

export interface EncounterConditionValueListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface EncounterConditionValueRetrieveRequest {
    id: string;
}

export interface EncounterMethodListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface EncounterMethodRetrieveRequest {
    id: string;
}

export interface PokemonEncountersRetrieveRequest {
    pokemonId: string;
}

/**
 * 
 */
export class EncountersApi extends runtime.BaseAPI {

    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * List encounter conditions
     */
    async encounterConditionListRaw(requestParameters: EncounterConditionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEncounterConditionSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-condition/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEncounterConditionSummaryListFromJSON(jsonValue));
    }

    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * List encounter conditions
     */
    async encounterConditionList(requestParameters: EncounterConditionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEncounterConditionSummaryList> {
        const response = await this.encounterConditionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * Get encounter condition
     */
    async encounterConditionRetrieveRaw(requestParameters: EncounterConditionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncounterConditionDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling encounterConditionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-condition/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncounterConditionDetailFromJSON(jsonValue));
    }

    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * Get encounter condition
     */
    async encounterConditionRetrieve(requestParameters: EncounterConditionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncounterConditionDetail> {
        const response = await this.encounterConditionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * List encounter condition values
     */
    async encounterConditionValueListRaw(requestParameters: EncounterConditionValueListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEncounterConditionValueSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-condition-value/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEncounterConditionValueSummaryListFromJSON(jsonValue));
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * List encounter condition values
     */
    async encounterConditionValueList(requestParameters: EncounterConditionValueListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEncounterConditionValueSummaryList> {
        const response = await this.encounterConditionValueListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * Get encounter condition value
     */
    async encounterConditionValueRetrieveRaw(requestParameters: EncounterConditionValueRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncounterConditionValueDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling encounterConditionValueRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-condition-value/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncounterConditionValueDetailFromJSON(jsonValue));
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * Get encounter condition value
     */
    async encounterConditionValueRetrieve(requestParameters: EncounterConditionValueRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncounterConditionValueDetail> {
        const response = await this.encounterConditionValueRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * List encounter methods
     */
    async encounterMethodListRaw(requestParameters: EncounterMethodListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEncounterMethodSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-method/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEncounterMethodSummaryListFromJSON(jsonValue));
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * List encounter methods
     */
    async encounterMethodList(requestParameters: EncounterMethodListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEncounterMethodSummaryList> {
        const response = await this.encounterMethodListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * Get encounter method
     */
    async encounterMethodRetrieveRaw(requestParameters: EncounterMethodRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncounterMethodDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling encounterMethodRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/encounter-method/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncounterMethodDetailFromJSON(jsonValue));
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * Get encounter method
     */
    async encounterMethodRetrieve(requestParameters: EncounterMethodRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncounterMethodDetail> {
        const response = await this.encounterMethodRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles Pokemon Encounters as a sub-resource.
     * Get pokemon encounter
     */
    async pokemonEncountersRetrieveRaw(requestParameters: PokemonEncountersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PokemonEncountersRetrieve200ResponseInner>>> {
        if (requestParameters['pokemonId'] == null) {
            throw new runtime.RequiredError(
                'pokemonId',
                'Required parameter "pokemonId" was null or undefined when calling pokemonEncountersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/pokemon/{pokemon_id}/encounters`.replace(`{${"pokemon_id"}}`, encodeURIComponent(String(requestParameters['pokemonId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PokemonEncountersRetrieve200ResponseInnerFromJSON));
    }

    /**
     * Handles Pokemon Encounters as a sub-resource.
     * Get pokemon encounter
     */
    async pokemonEncountersRetrieve(requestParameters: PokemonEncountersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PokemonEncountersRetrieve200ResponseInner>> {
        const response = await this.pokemonEncountersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
