/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenerationDetail,
  PaginatedGenerationSummaryList,
  PaginatedPokedexSummaryList,
  PaginatedVersionGroupSummaryList,
  PaginatedVersionSummaryList,
  PokedexDetail,
  VersionDetail,
  VersionGroupDetail,
} from '../models/index';
import {
    GenerationDetailFromJSON,
    GenerationDetailToJSON,
    PaginatedGenerationSummaryListFromJSON,
    PaginatedGenerationSummaryListToJSON,
    PaginatedPokedexSummaryListFromJSON,
    PaginatedPokedexSummaryListToJSON,
    PaginatedVersionGroupSummaryListFromJSON,
    PaginatedVersionGroupSummaryListToJSON,
    PaginatedVersionSummaryListFromJSON,
    PaginatedVersionSummaryListToJSON,
    PokedexDetailFromJSON,
    PokedexDetailToJSON,
    VersionDetailFromJSON,
    VersionDetailToJSON,
    VersionGroupDetailFromJSON,
    VersionGroupDetailToJSON,
} from '../models/index';

export interface GenerationListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface GenerationRetrieveRequest {
    id: string;
}

export interface PokedexListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface PokedexRetrieveRequest {
    id: string;
}

export interface VersionGroupListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface VersionGroupRetrieveRequest {
    id: string;
}

export interface VersionListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface VersionRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class GamesApi extends runtime.BaseAPI {

    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * List genrations
     */
    async generationListRaw(requestParameters: GenerationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGenerationSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/generation/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGenerationSummaryListFromJSON(jsonValue));
    }

    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * List genrations
     */
    async generationList(requestParameters: GenerationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGenerationSummaryList> {
        const response = await this.generationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * Get genration
     */
    async generationRetrieveRaw(requestParameters: GenerationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerationDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling generationRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/generation/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerationDetailFromJSON(jsonValue));
    }

    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * Get genration
     */
    async generationRetrieve(requestParameters: GenerationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerationDetail> {
        const response = await this.generationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * List pokedex
     */
    async pokedexListRaw(requestParameters: PokedexListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPokedexSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/pokedex/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPokedexSummaryListFromJSON(jsonValue));
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * List pokedex
     */
    async pokedexList(requestParameters: PokedexListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPokedexSummaryList> {
        const response = await this.pokedexListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * Get pokedex
     */
    async pokedexRetrieveRaw(requestParameters: PokedexRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PokedexDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pokedexRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/pokedex/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PokedexDetailFromJSON(jsonValue));
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * Get pokedex
     */
    async pokedexRetrieve(requestParameters: PokedexRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PokedexDetail> {
        const response = await this.pokedexRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * List version groups
     */
    async versionGroupListRaw(requestParameters: VersionGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVersionGroupSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/version-group/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVersionGroupSummaryListFromJSON(jsonValue));
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * List version groups
     */
    async versionGroupList(requestParameters: VersionGroupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVersionGroupSummaryList> {
        const response = await this.versionGroupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * Get version group
     */
    async versionGroupRetrieveRaw(requestParameters: VersionGroupRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionGroupDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling versionGroupRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/version-group/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionGroupDetailFromJSON(jsonValue));
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * Get version group
     */
    async versionGroupRetrieve(requestParameters: VersionGroupRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionGroupDetail> {
        const response = await this.versionGroupRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * List versions
     */
    async versionListRaw(requestParameters: VersionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVersionSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/version/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVersionSummaryListFromJSON(jsonValue));
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * List versions
     */
    async versionList(requestParameters: VersionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVersionSummaryList> {
        const response = await this.versionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * Get version
     */
    async versionRetrieveRaw(requestParameters: VersionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling versionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/version/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionDetailFromJSON(jsonValue));
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * Get version
     */
    async versionRetrieve(requestParameters: VersionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionDetail> {
        const response = await this.versionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
