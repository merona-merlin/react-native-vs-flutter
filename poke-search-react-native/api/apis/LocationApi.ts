/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationAreaDetail,
  LocationDetail,
  PaginatedLocationAreaSummaryList,
  PaginatedLocationSummaryList,
  PaginatedPalParkAreaSummaryList,
  PaginatedRegionSummaryList,
  PalParkAreaDetail,
  RegionDetail,
} from '../models/index';
import {
    LocationAreaDetailFromJSON,
    LocationAreaDetailToJSON,
    LocationDetailFromJSON,
    LocationDetailToJSON,
    PaginatedLocationAreaSummaryListFromJSON,
    PaginatedLocationAreaSummaryListToJSON,
    PaginatedLocationSummaryListFromJSON,
    PaginatedLocationSummaryListToJSON,
    PaginatedPalParkAreaSummaryListFromJSON,
    PaginatedPalParkAreaSummaryListToJSON,
    PaginatedRegionSummaryListFromJSON,
    PaginatedRegionSummaryListToJSON,
    PalParkAreaDetailFromJSON,
    PalParkAreaDetailToJSON,
    RegionDetailFromJSON,
    RegionDetailToJSON,
} from '../models/index';

export interface LocationAreaListRequest {
    limit?: number;
    offset?: number;
}

export interface LocationAreaRetrieveRequest {
    id: number;
}

export interface LocationListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface LocationRetrieveRequest {
    id: string;
}

export interface PalParkAreaListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface PalParkAreaRetrieveRequest {
    id: string;
}

export interface RegionListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface RegionRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * List location areas
     */
    async locationAreaListRaw(requestParameters: LocationAreaListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLocationAreaSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/location-area/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLocationAreaSummaryListFromJSON(jsonValue));
    }

    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * List location areas
     */
    async locationAreaList(requestParameters: LocationAreaListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLocationAreaSummaryList> {
        const response = await this.locationAreaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * Get location area
     */
    async locationAreaRetrieveRaw(requestParameters: LocationAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationAreaDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationAreaRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/location-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationAreaDetailFromJSON(jsonValue));
    }

    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * Get location area
     */
    async locationAreaRetrieve(requestParameters: LocationAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationAreaDetail> {
        const response = await this.locationAreaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * List locations
     */
    async locationListRaw(requestParameters: LocationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLocationSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/location/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLocationSummaryListFromJSON(jsonValue));
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * List locations
     */
    async locationList(requestParameters: LocationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLocationSummaryList> {
        const response = await this.locationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * Get location
     */
    async locationRetrieveRaw(requestParameters: LocationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/location/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationDetailFromJSON(jsonValue));
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * Get location
     */
    async locationRetrieve(requestParameters: LocationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationDetail> {
        const response = await this.locationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * List pal park areas
     */
    async palParkAreaListRaw(requestParameters: PalParkAreaListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPalParkAreaSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/pal-park-area/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPalParkAreaSummaryListFromJSON(jsonValue));
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * List pal park areas
     */
    async palParkAreaList(requestParameters: PalParkAreaListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPalParkAreaSummaryList> {
        const response = await this.palParkAreaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * Get pal park area
     */
    async palParkAreaRetrieveRaw(requestParameters: PalParkAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PalParkAreaDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling palParkAreaRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/pal-park-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PalParkAreaDetailFromJSON(jsonValue));
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * Get pal park area
     */
    async palParkAreaRetrieve(requestParameters: PalParkAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PalParkAreaDetail> {
        const response = await this.palParkAreaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * List regions
     */
    async regionListRaw(requestParameters: RegionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRegionSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/region/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRegionSummaryListFromJSON(jsonValue));
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * List regions
     */
    async regionList(requestParameters: RegionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRegionSummaryList> {
        const response = await this.regionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * Get region
     */
    async regionRetrieveRaw(requestParameters: RegionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegionDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/region/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionDetailFromJSON(jsonValue));
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * Get region
     */
    async regionRetrieve(requestParameters: RegionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegionDetail> {
        const response = await this.regionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
