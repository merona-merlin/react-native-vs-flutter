/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LanguageDetail,
  PaginatedLanguageSummaryList,
} from '../models/index';
import {
    LanguageDetailFromJSON,
    LanguageDetailToJSON,
    PaginatedLanguageSummaryListFromJSON,
    PaginatedLanguageSummaryListToJSON,
} from '../models/index';

export interface LanguageListRequest {
    limit?: number;
    offset?: number;
    q?: string;
}

export interface LanguageRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class UtilityApi extends runtime.BaseAPI {

    /**
     * Languages for translations of API resource information.
     * List languages
     */
    async languageListRaw(requestParameters: LanguageListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLanguageSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/language/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLanguageSummaryListFromJSON(jsonValue));
    }

    /**
     * Languages for translations of API resource information.
     * List languages
     */
    async languageList(requestParameters: LanguageListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLanguageSummaryList> {
        const response = await this.languageListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Languages for translations of API resource information.
     * Get language
     */
    async languageRetrieveRaw(requestParameters: LanguageRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguageDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling languageRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v2/language/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageDetailFromJSON(jsonValue));
    }

    /**
     * Languages for translations of API resource information.
     * Get language
     */
    async languageRetrieve(requestParameters: LanguageRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguageDetail> {
        const response = await this.languageRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
